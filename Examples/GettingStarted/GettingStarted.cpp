#include <daisy_pod.h>
#include <daisysp.h>

#include "Effect/LowpassFilter.h"
#include "Effect/HighpassFilter.h"

#include "PolySynth/FourVoiceSynth.h"


#include <stdio.h>
#include <string.h>
#include "dev/oled_ssd130x.h"


using namespace daisy;
using namespace daisysp;

const uint8_t splash_screen[] = {
0x08, 0x20, 0x08, 0x00, 0xe0, 0x80, 0x18, 0x00, 0x40, 0x03, 0xe0, 0x01, 0x80, 0x06, 0x01, 0x02, 
0x08, 0x10, 0x08, 0x00, 0xf3, 0x00, 0x08, 0x00, 0x30, 0x03, 0xe0, 0x00, 0x80, 0x08, 0x02, 0x02, 
0x08, 0x11, 0x88, 0x00, 0x7c, 0x00, 0x04, 0x00, 0x08, 0x0e, 0x10, 0x00, 0x80, 0x10, 0x04, 0x02, 
0x04, 0x0a, 0x57, 0x80, 0x78, 0x00, 0x04, 0x00, 0x0c, 0x10, 0x10, 0x00, 0x40, 0x08, 0x08, 0x02, 
0x0c, 0x0c, 0x20, 0x40, 0x70, 0x00, 0x04, 0x00, 0x04, 0xe0, 0x10, 0x00, 0x40, 0x08, 0x08, 0x04, 
0x0b, 0x88, 0x10, 0x20, 0x20, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x80, 0x08, 0x0e, 0x04, 
0x10, 0xc8, 0x20, 0x20, 0x20, 0x00, 0x03, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x10, 0x0e, 0x08, 
0x20, 0x3e, 0xc0, 0x10, 0x20, 0x00, 0x0c, 0x80, 0x20, 0x00, 0x10, 0x02, 0x00, 0x10, 0xf6, 0x08, 
0xa0, 0x41, 0x80, 0x16, 0x40, 0x00, 0x10, 0xc0, 0xf0, 0x00, 0x10, 0x04, 0x00, 0x10, 0x44, 0x04, 
0xc0, 0x40, 0x40, 0x1c, 0x20, 0x00, 0x60, 0x41, 0x10, 0x00, 0x20, 0x04, 0x00, 0x20, 0x84, 0x0f, 
0xc0, 0x80, 0x40, 0x02, 0x28, 0x00, 0x80, 0x46, 0x08, 0x00, 0x20, 0x0b, 0x00, 0x67, 0x02, 0x11, 
0xc0, 0xc0, 0x20, 0x02, 0x70, 0x00, 0x80, 0x3c, 0x08, 0x00, 0x10, 0x11, 0x00, 0x9a, 0x01, 0x11, 
0x33, 0x00, 0x20, 0x01, 0x20, 0x00, 0x80, 0x38, 0x04, 0x00, 0x18, 0x10, 0xe3, 0x02, 0x01, 0x10, 
0x0a, 0x00, 0x70, 0x00, 0xa0, 0x01, 0x00, 0x30, 0x04, 0x00, 0x07, 0xe0, 0x14, 0x01, 0x03, 0x88, 
0x06, 0x00, 0xf8, 0x00, 0xb0, 0x02, 0x00, 0x40, 0x04, 0x00, 0x00, 0x60, 0x08, 0x01, 0x1c, 0x88, 
0x04, 0x00, 0xe7, 0x00, 0x92, 0x02, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x08, 0x00, 0xe0, 0x50, 
0x1b, 0x00, 0x61, 0x00, 0x6e, 0x04, 0x00, 0x80, 0x02, 0x00, 0x00, 0xc0, 0x04, 0x08, 0xe0, 0x50, 
0x60, 0xa0, 0x20, 0x80, 0x04, 0x0f, 0x00, 0x80, 0x03, 0xc0, 0x01, 0x00, 0x04, 0x17, 0xe0, 0x28, 
0x80, 0x50, 0x20, 0x80, 0x02, 0x30, 0xc0, 0x80, 0x01, 0x40, 0x02, 0x00, 0x04, 0x21, 0xc0, 0x07, 
0x00, 0x10, 0x10, 0x70, 0x06, 0xc0, 0x31, 0x00, 0x02, 0x20, 0x02, 0x00, 0x02, 0x21, 0xc0, 0x01, 
0x00, 0x08, 0x10, 0x08, 0x05, 0x00, 0x09, 0x00, 0x66, 0x20, 0x02, 0x00, 0x02, 0x20, 0x20, 0x02, 
0x00, 0x08, 0x20, 0x08, 0x08, 0x00, 0x14, 0x81, 0x9c, 0x1c, 0x44, 0x00, 0x04, 0x18, 0x20, 0x04, 
0x00, 0xf4, 0x58, 0x04, 0x08, 0x00, 0x64, 0x46, 0xc0, 0x02, 0xa8, 0x00, 0x08, 0x08, 0x20, 0x0c, 
0x03, 0x43, 0x86, 0x04, 0x08, 0x00, 0x83, 0xb8, 0x20, 0x01, 0x18, 0x00, 0x38, 0x08, 0x40, 0x10, 
0x01, 0xa1, 0x61, 0x02, 0x90, 0x00, 0x80, 0xc4, 0x18, 0x00, 0xe0, 0x00, 0x40, 0x10, 0x40, 0x20, 
0x00, 0x80, 0x10, 0xc1, 0xf0, 0x00, 0x80, 0x3a, 0x06, 0x01, 0x40, 0x00, 0x40, 0x20, 0x20, 0x10, 
0x01, 0x00, 0x10, 0x23, 0xf0, 0x00, 0x40, 0x01, 0x02, 0x01, 0x40, 0x00, 0x60, 0x40, 0x20, 0x10, 
0x01, 0x00, 0x10, 0x1f, 0xf8, 0x00, 0x40, 0x01, 0x01, 0x82, 0x40, 0x00, 0x50, 0x80, 0x20, 0x10, 
0x01, 0x00, 0x08, 0x06, 0x78, 0x00, 0x20, 0x00, 0x80, 0x96, 0x80, 0x00, 0x53, 0xc0, 0x60, 0x30, 
0x02, 0x00, 0x08, 0x07, 0x34, 0x00, 0x20, 0x00, 0x80, 0x7d, 0x00, 0x00, 0x8c, 0x60, 0x41, 0xf8, 
0x02, 0x00, 0x10, 0x18, 0x28, 0x00, 0x20, 0x01, 0x00, 0x3f, 0x00, 0x01, 0x00, 0x20, 0x42, 0x40, 
0x03, 0x00, 0x10, 0x10, 0x18, 0x00, 0xc0, 0x02, 0x00, 0x1f, 0x00, 0x01, 0x00, 0x30, 0x42, 0x40, 
0x04, 0x00, 0x08, 0x30, 0x08, 0x01, 0xc0, 0x01, 0x00, 0x3f, 0x80, 0x01, 0x00, 0x08, 0x24, 0x20, 
0x0c, 0x00, 0x08, 0x60, 0x08, 0x03, 0xb0, 0x01, 0x30, 0x34, 0xc0, 0x00, 0x80, 0x04, 0x18, 0x20, 
0x90, 0x00, 0x18, 0x80, 0x0c, 0x02, 0x08, 0x01, 0xcc, 0x40, 0x40, 0x00, 0x80, 0x04, 0x20, 0x21, 
0xb0, 0x00, 0x15, 0x00, 0x04, 0x04, 0x07, 0x83, 0x03, 0x80, 0x40, 0x00, 0x40, 0x02, 0x40, 0x13, 
0xe0, 0x00, 0x16, 0x00, 0x02, 0x04, 0x00, 0x7c, 0x00, 0x40, 0x40, 0x00, 0x40, 0x01, 0xc0, 0x13, 
0x80, 0x00, 0x21, 0x00, 0x01, 0xcc, 0x00, 0x80, 0x00, 0x40, 0x40, 0x00, 0x40, 0x02, 0x00, 0x17, 
0xc6, 0x00, 0x21, 0x00, 0x01, 0x3c, 0x00, 0x80, 0x00, 0x20, 0x40, 0x00, 0x80, 0x02, 0x00, 0x09, 
0x6a, 0x00, 0x41, 0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x10, 0x30, 0x00, 0x80, 0x01, 0x00, 0x11, 
0x12, 0x00, 0x40, 0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x10, 0x10, 0x00, 0x40, 0x01, 0x00, 0x20, 
0x02, 0x00, 0x60, 0x80, 0x00, 0x80, 0x00, 0x20, 0x00, 0x20, 0x10, 0x00, 0x80, 0x02, 0x00, 0x40, 
0x01, 0x00, 0x90, 0x40, 0x01, 0x00, 0x00, 0x20, 0x00, 0x40, 0x08, 0x09, 0x00, 0x04, 0x00, 0xc0, 
0x01, 0x00, 0x90, 0x40, 0x02, 0x00, 0x00, 0x30, 0x00, 0x40, 0x08, 0x16, 0x00, 0x04, 0x07, 0x20, 
0x01, 0x18, 0x88, 0x20, 0x01, 0x80, 0x00, 0x10, 0x00, 0x80, 0x0c, 0xe0, 0x00, 0x04, 0x08, 0x20, 
0x00, 0xa8, 0x88, 0x20, 0x00, 0x80, 0x00, 0x08, 0x00, 0x80, 0x0d, 0x00, 0x00, 0x08, 0x10, 0x10, 
0x00, 0x49, 0x30, 0x30, 0x00, 0x80, 0x00, 0x07, 0x00, 0x80, 0x0f, 0x00, 0x70, 0x78, 0x10, 0x10, 
0x00, 0x47, 0xc1, 0xc8, 0x00, 0x40, 0x00, 0x01, 0x01, 0x00, 0x1e, 0x00, 0x4d, 0xa4, 0x08, 0x28, 
0x00, 0x2e, 0x00, 0x88, 0x00, 0xc0, 0x06, 0x02, 0x81, 0x00, 0xee, 0x00, 0x42, 0x3a, 0x08, 0x28, 
0x00, 0x18, 0x00, 0x78, 0x00, 0x80, 0x09, 0x84, 0x80, 0x80, 0x84, 0x01, 0x80, 0x42, 0x08, 0x44, 
0x00, 0x10, 0x00, 0x08, 0x01, 0x83, 0x30, 0xcc, 0x80, 0x81, 0x02, 0x02, 0x00, 0x21, 0x96, 0x88, 
0x00, 0x20, 0x00, 0x04, 0x02, 0x02, 0xc0, 0x38, 0x60, 0xa1, 0x02, 0x02, 0x00, 0x10, 0xa1, 0x10, 
0x00, 0x60, 0x00, 0x04, 0x02, 0x5c, 0x00, 0x00, 0x10, 0x5a, 0x01, 0xc2, 0x00, 0x20, 0x61, 0x10, 
0xc3, 0xa0, 0x00, 0x04, 0x01, 0xfc, 0x00, 0x00, 0x08, 0x44, 0x00, 0x3c, 0x00, 0x20, 0x21, 0x89, 
0x35, 0x20, 0x00, 0x06, 0x00, 0xe0, 0x00, 0x00, 0x08, 0x44, 0x00, 0x26, 0x00, 0x10, 0x52, 0x85, 
0x08, 0x13, 0x80, 0x08, 0x03, 0x60, 0x00, 0x00, 0x14, 0x82, 0x00, 0x02, 0x40, 0x30, 0x8c, 0x72, 
0x08, 0x0c, 0x40, 0x10, 0x2c, 0xe0, 0x00, 0x00, 0x13, 0x02, 0x00, 0x03, 0xe0, 0x4f, 0x80, 0x72, 
0x04, 0x00, 0x38, 0x29, 0xd0, 0x20, 0x00, 0x00, 0x20, 0x01, 0x00, 0x02, 0x23, 0x81, 0x00, 0xfe, 
0x04, 0x00, 0x08, 0xc6, 0x40, 0x30, 0x00, 0x00, 0x20, 0x00, 0x80, 0x04, 0x1c, 0x81, 0x01, 0x78, 
0x02, 0x00, 0x08, 0x80, 0x20, 0x10, 0x02, 0x0c, 0x40, 0x00, 0x80, 0x04, 0x00, 0x02, 0x01, 0x10, 
0x01, 0xc0, 0x05, 0x00, 0x20, 0x0b, 0x85, 0xb6, 0x40, 0x00, 0x80, 0x04, 0x00, 0x04, 0x01, 0x08, 
0x02, 0x40, 0x07, 0x00, 0x30, 0x1c, 0x48, 0x61, 0x80, 0x00, 0xa0, 0x02, 0x00, 0x02, 0x00, 0x84, 
0x02, 0x40, 0x0e, 0x00, 0x70, 0x70, 0x70, 0x00, 0x80, 0x00, 0xf0, 0x03, 0x80, 0x02, 0x00, 0x84, 
0x04, 0x30, 0x1c, 0x00, 0xf0, 0x80, 0x18, 0x00, 0x40, 0x03, 0xf8, 0x01, 0xc0, 0x06, 0x01, 0x02};

const uint8_t  python_splash [] = {
0x8 ,0x20 ,0x8 ,0x0 ,0xe0 ,0x80 ,0x18 ,0x0 ,0x40 ,0x3 ,0xe0 ,0x1 ,0x80 ,0x6 ,0x1 ,0x2 ,0x8 ,0x10 ,0x8 ,0x0 ,0xf3 ,0x0 ,0x8 ,0x0 ,0x30 ,0x3 ,0xe0 ,0x0 ,0x80 ,0x8 ,0x2 ,0x2 ,0x8 ,0x11 ,0x88 ,0x0 ,0x7c ,0x0 ,0x4 ,0x0 ,0x8 ,0xe ,0x10 ,0x0 ,0x80 ,0x10 ,0x4 ,0x2 ,0x4 ,0xa ,0x57 ,0x80 ,0x78 ,0x0 ,0x4 ,0x0 ,0xc ,0x10 ,0x10 ,0x0 ,0x40 ,0x8 ,0x8 ,0x2 ,0xc ,0xc ,0x20 ,0x40 ,0x70 ,0x0 ,0x4 ,0x0 ,0x4 ,0xe0 ,0x10 ,0x0 ,0x40 ,0x8 ,0x8 ,0x4 ,0xb ,0x88 ,0x10 ,0x20 ,0x20 ,0x0 ,0x2 ,0x0 ,0xb ,0x0 ,0x8 ,0x0 ,0x80 ,0x8 ,0xe ,0x4 ,0x10 ,0xc8 ,0x20 ,0x20 ,0x20 ,0x0 ,0x3 ,0x0 ,0x10 ,0x0 ,0x8 ,0x1 ,0x0 ,0x10 ,0xe ,0x8 ,0x20 ,0x3e ,0xc0 ,0x10 ,0x20 ,0x0 ,0xc ,0x80 ,0x20 ,0x0 ,0x10 ,0x2 ,0x0 ,0x10 ,0xf6 ,0x8 ,0xa0 ,0x41 ,0x80 ,0x16 ,0x40 ,0x0 ,0x10 ,0xc0 ,0xf0 ,0x0 ,0x10 ,0x4 ,0x0 ,0x10 ,0x44 ,0x4 ,0xc0 ,0x40 ,0x40 ,0x1c ,0x20 ,0x0 ,0x60 ,0x41 ,0x10 ,0x0 ,0x20 ,0x4 ,0x0 ,0x20 ,0x84 ,0xf ,0xc0 ,0x80 ,0x40 ,0x2 ,0x28 ,0x0 ,0x80 ,0x46 ,0x8 ,0x0 ,0x20 ,0xb ,0x0 ,0x67 ,0x2 ,0x11 ,0xc0 ,0xc0 ,0x20 ,0x2 ,0x70 ,0x0 ,0x80 ,0x3c ,0x8 ,0x0 ,0x10 ,0x11 ,0x0 ,0x9a ,0x1 ,0x11 ,0x33 ,0x0 ,0x20 ,0x1 ,0x20 ,0x0 ,0x80 ,0x38 ,0x4 ,0x0 ,0x18 ,0x10 ,0xe3 ,0x2 ,0x1 ,0x10 ,0xa 
,0x0 ,0x70 ,0x0 ,0xa0 ,0x1 ,0x0 ,0x30 ,0x4 ,0x0 ,0x7 ,0xe0 ,0x14 ,0x1 ,0x3 ,0x88 ,0x6 ,0x0 ,0xf8 ,0x0 ,0xb0 ,0x2 ,0x0 ,0x40 ,0x4 ,0x0 ,0x0 ,0x60 ,0x8 ,0x1 ,0x1c ,0x88 ,0x4 ,0x0 ,0xe7 ,0x0 ,0x92 ,0x2 ,0x0 ,0x40 ,0x2 ,0x0 ,0x0 ,0x40 ,0x8 ,0x0 ,0xe0 ,0x50 ,0x1b ,0x0 ,0x61 ,0x0 ,0x6e ,0x4 ,0x0 ,0x80 ,0x2 ,0x0 ,0x0 ,0xc0 ,0x4 ,0x8 ,0xe0 ,0x50 ,0x60 ,0xa0 ,0x20 ,0x80 ,0x4 ,0xf ,0x0 ,0x80 ,0x3 ,0xc0 ,0x1 ,0x0 ,0x4 ,0x17 ,0xe0 ,0x28 ,0x80 ,0x50 ,0x20 ,0x80 ,0x2 ,0x30 ,0xc0 ,0x80 ,0x1 ,0x40 ,0x2 ,0x0 ,0x4 ,0x21 ,0xc0 ,0x7 ,0x0 ,0x10 ,0x10 ,0x70 ,0x6 ,0xc0 ,0x31 ,0x0 ,0x2 ,0x20 ,0x2 ,0x0 ,0x2 ,0x21 ,0xc0 ,0x1 ,0x0 ,0x8 ,0x10 ,0x8 ,0x5 ,0x0 ,0x9 ,0x0 ,0x66 ,0x20 ,0x2 ,0x0 ,0x2 ,0x20 ,0x20 ,0x2 ,0x0 ,0x8 ,0x20 ,0x8 ,0x8 ,0x0 ,0x14 ,0x81 ,0x9c ,0x1c ,0x44 ,0x0 ,0x4 ,0x18 ,0x20 ,0x4 ,0x0 ,0xf4 ,0x58 ,0x4 ,0x8 ,0x0 ,0x64 ,0x46 ,0xc0 ,0x2 ,0xa8 ,0x0 ,0x8 ,0x8 ,0x20 ,0xc ,0x3 ,0x43 ,0x86 ,0x4 ,0x8 ,0x0 ,0x83 ,0xb8 ,0x20 ,0x1 ,0x18 ,0x0 ,0x38 ,0x8 ,0x40 ,0x10 ,0x1 ,0xa1 ,0x61 ,0x2 ,0x90 ,0x0 ,0x80 ,0xc4 ,0x18 ,0x0 ,0xe0 ,0x0 ,0x40 ,0x10 ,0x40 ,0x20 ,0x0 ,0x80 ,0x10 ,0xc1 ,0xf0 ,0x0 ,0x80 ,0x3a ,0x6 ,0x1 ,0x40 ,0x0 ,0x40 ,0x20 ,0x20 ,0x10 ,0x1 ,0x0 ,0x10 ,0x23 ,0xf0 ,0x0 ,0x40 ,0x1 ,0x2 ,0x1 ,0x40 ,0x0 ,0x60 ,0x40 ,0x20 ,0x10 ,0x1 ,0x0 ,0x10 ,0x1f ,0xf8 ,0x0 ,0x40 ,0x1 ,0x1 ,0x82 ,0x40 ,0x0 ,0x50 ,0x80 ,0x20 ,0x10 ,0x1 ,0x0 ,0x8 ,0x6 
,0x78 ,0x0 ,0x20 ,0x0 ,0x80 ,0x96 ,0x80 ,0x0 ,0x53 ,0xc0 ,0x60 ,0x30 ,0x2 ,0x0 ,0x8 ,0x7 ,0x34 ,0x0 ,0x20 ,0x0 ,0x80 ,0x7d ,0x0 ,0x0 ,0x8c ,0x60 ,0x41 ,0xf8 ,0x2 ,0x0 ,0x10 ,0x18 ,0x28 ,0x0 ,0x20 ,0x1 ,0x0 ,0x3f ,0x0 ,0x1 ,0x0 ,0x20 ,0x42 ,0x40 ,0x3 ,0x0 ,0x10 ,0x10 ,0x18 ,0x0 ,0xc0 ,0x2 ,0x0 ,0x1f ,0x0 ,0x1 ,0x0 ,0x30 ,0x42 ,0x40 ,0x4 ,0x0 ,0x8 ,0x30 ,0x8 ,0x1 ,0xc0 ,0x1 ,0x0 ,0x3f ,0x80 ,0x1 ,0x0 ,0x8 ,0x24 ,0x20 ,0xc ,0x0 ,0x8 ,0x60 ,0x8 ,0x3 ,0xb0 ,0x1 ,0x30 ,0x34 ,0xc0 ,0x0 ,0x80 ,0x4 ,0x18 ,0x20 ,0x90 ,0x0 ,0x18 ,0x80 ,0xc ,0x2 ,0x8 ,0x1 ,0xcc ,0x40 ,0x40 ,0x0 
,0x80 ,0x4 ,0x20 ,0x21 ,0xb0 ,0x0 ,0x15 ,0x0 ,0x4 ,0x4 ,0x7 ,0x83 ,0x3 ,0x80 ,0x40 ,0x0 ,0x40 ,0x2 ,0x40 ,0x13 ,0xe0 ,0x0 ,0x16 ,0x0 ,0x2 ,0x4 ,0x0 ,0x7c ,0x0 ,0x40 ,0x40 ,0x0 ,0x40 ,0x1 ,0xc0 ,0x13 ,0x80 ,0x0 ,0x21 ,0x0 ,0x1 ,0xcc ,0x0 ,0x80 ,0x0 ,0x40 ,0x40 ,0x0 ,0x40 ,0x2 ,0x0 ,0x17 ,0xc6 ,0x0 ,0x21 ,0x0 ,0x1 ,0x3c ,0x0 ,0x80 ,0x0 ,0x20 ,0x40 ,0x0 ,0x80 ,0x2 ,0x0 ,0x9 ,0x6a ,0x0 ,0x41 ,0x0 ,0x1 ,0x0 ,0x0 ,0x40 ,0x0 ,0x10 ,0x30 ,0x0 ,0x80 ,0x1 ,0x0 ,0x11 ,0x12 ,0x0 ,0x40 ,0x80 ,0x0 ,0x80 ,0x0 ,0x40 ,0x0 ,0x10 ,0x10 ,0x0 ,0x40 ,0x1 ,0x0 ,0x20 ,0x2 ,0x0 ,0x60 ,0x80 ,0x0 ,0x80 ,0x0 ,0x20 ,0x0 ,0x20 ,0x10 ,0x0 ,0x80 ,0x2 ,0x0 ,0x40 ,0x1 ,0x0 ,0x90 ,0x40 ,0x1 ,0x0 ,0x0 ,0x20 ,0x0 ,0x40 ,0x8 ,0x9 ,0x0 ,0x4 ,0x0 ,0xc0 ,0x1 ,0x0 ,0x90 ,0x40 ,0x2 ,0x0 ,0x0 ,0x30 ,0x0 ,0x40 ,0x8 ,0x16 ,0x0 ,0x4 ,0x7 ,0x20 ,0x1 ,0x18 ,0x88 ,0x20 ,0x1 ,0x80 ,0x0 ,0x10 ,0x0 ,0x80 ,0xc ,0xe0 ,0x0 ,0x4 ,0x8 ,0x20 ,0x0 ,0xa8 ,0x88 ,0x20 ,0x0 ,0x80 ,0x0 ,0x8 ,0x0 ,0x80 ,0xd ,0x0 ,0x0 ,0x8 ,0x10 ,0x10 ,0x0 ,0x49 ,0x30 ,0x30 ,0x0 ,0x80 ,0x0 ,0x7 ,0x0 ,0x80 ,0xf ,0x0 ,0x70 ,0x78 ,0x10 ,0x10 ,0x0 ,0x47 ,0xc1 ,0xc8 ,0x0 ,0x40 ,0x0 ,0x1 ,0x1 ,0x0 ,0x1e ,0x0 ,0x4d ,0xa4 ,0x8 ,0x28 ,0x0 ,0x2e ,0x0 ,0x88 ,0x0 ,0xc0 ,0x6 ,0x2 ,0x81 ,0x0 ,0xee ,0x0 ,0x42 ,0x3a ,0x8 ,0x28 ,0x0 ,0x18 ,0x0 ,0x78 ,0x0 ,0x80 ,0x9 ,0x84 ,0x80 ,0x80 ,0x84 ,0x1 ,0x80 ,0x42 ,0x8 ,0x44 ,0x0 ,0x10 ,0x0 ,0x8 ,0x1 ,0x83 ,0x30 ,0xcc ,0x80 ,0x81 ,0x2 ,0x2 ,0x0 ,0x21 ,0x96 ,0x88 ,0x0 ,0x20 ,0x0 ,0x4 ,0x2 ,0x2 ,0xc0 ,0x38 ,0x60 ,0xa1 ,0x2 ,0x2 ,0x0 ,0x10 ,0xa1 ,0x10 ,0x0 ,0x60 ,0x0 ,0x4 ,0x2 ,0x5c ,0x0 ,0x0 ,0x10 ,0x5a ,0x1 ,0xc2 ,0x0 ,0x20 ,0x61 ,0x10 ,0xc3 ,0xa0 ,0x0 ,0x4 ,0x1 ,0xfc ,0x0 ,0x0 ,0x8 ,0x44 ,0x0 ,0x3c ,0x0 ,0x20 ,0x21 ,0x89 ,0x35 ,0x20 ,0x0 ,0x6 ,0x0 
,0xe0 ,0x0 ,0x0 ,0x8 ,0x44 ,0x0 ,0x26 ,0x0 ,0x10 ,0x52 ,0x85 ,0x8 ,0x13 ,0x80 ,0x8 ,0x3 ,0x60 ,0x0 ,0x0 ,0x14 ,0x82 ,0x0 ,0x2 ,0x40 ,0x30 ,0x8c ,0x72 ,0x8 ,0xc ,0x40 ,0x10 ,0x2c ,0xe0 ,0x0 ,0x0 ,0x13 ,0x2 ,0x0 ,0x3 ,0xe0 ,0x4f ,0x80 ,0x72 ,0x4 ,0x0 ,0x38 ,0x29 ,0xd0 ,0x20 ,0x0 ,0x0 ,0x20 ,0x1 ,0x0 ,0x2 ,0x23 ,0x81 ,0x0 ,0xfe ,0x4 ,0x0 ,0x8 ,0xc6 ,0x40 ,0x30 ,0x0 ,0x0 ,0x20 ,0x0 ,0x80 ,0x4 ,0x1c ,0x81 ,0x1 ,0x78 ,0x2 ,0x0 ,0x8 ,0x80 ,0x20 ,0x10 ,0x2 ,0xc ,0x40 ,0x0 ,0x80 ,0x4 ,0x0 ,0x2 ,0x1 ,0x10 ,0x1 ,0xc0 ,0x5 ,0x0 ,0x20 ,0xb ,0x85 ,0xb6 ,0x40 ,0x0 ,0x80 ,0x4 ,0x0 ,0x4 ,0x1 ,0x8 ,0x2 ,0x40 ,0x7 ,0x0 ,0x30 ,0x1c ,0x48 ,0x61 ,0x80 ,0x0 ,0xa0 ,0x2 ,0x0 ,0x2 ,0x0 ,0x84 ,0x2 ,0x40 ,0xe ,0x0 ,0x70 ,0x70 ,0x70 ,0x0 ,0x80 ,0x0 ,0xf0 ,0x3 ,0x80 ,0x2 ,0x0 ,0x84 ,0x4 ,0x30 ,0x1c ,0x0 ,0xf0 ,0x80 ,0x18 ,0x0 ,0x40 ,0x3 ,0xf8 ,0x1 ,0xc0 ,0x6 ,0x1 ,0x2 ,};

const uint8_t python_splash_logo[] = { 
0x8, 0x20, 0x8, 0x0, 0xe0, 0x80, 0x18, 0x0, 0x40, 0x3, 0xe0, 0x1, 0x80, 0x6, 0x1, 0x2, 0x8, 0x10, 0x8, 0x0, 0xf3, 0x0, 0x8, 0x0, 0x30, 0x3, 0xe0, 0x0, 0x80, 0x8, 0x2, 0x2, 
0x8, 0x11, 0x88, 0x0, 0x7c, 0x0, 0x4, 0x0, 0x8, 0xe, 0x10, 0x0, 0x80, 0x10, 0x4, 0x2, 0x4, 0xa, 0x57, 0x80, 0x78, 0x0, 0x4, 0x0, 0xc, 0x10, 0x10, 0x0, 0x40, 0x8, 0x8, 0x2, 
0xc, 0xc, 0x20, 0x40, 0x70, 0x0, 0x4, 0x0, 0x4, 0xe0, 0x10, 0x0, 0x40, 0x8, 0x8, 0x4, 0xb, 0x88, 0x10, 0x20, 0x20, 0x0, 0x2, 0x0, 0xb, 0x0, 0x8, 0x0, 0x80, 0x8, 0xe, 0x4, 0x10, 0xc8, 0x20, 0x20, 0x20, 0x0, 0x3, 0x0, 0x10, 0x0, 0x8, 0x1, 0x0, 0x10, 0xe, 0x8, 0x20, 0x3e, 0xc0, 0x10, 0x20, 0x0, 0xc, 0x80, 0x20, 0x0, 0x10, 0x2, 0x0, 0x10, 0xf6, 0x8, 0xa0, 0x41, 0x80, 0x16, 0x40, 0x0, 0x10, 0xc0, 0xf0, 0x0, 0x10, 0x4, 0x0, 0x10, 0x44, 0x4, 0xc0, 0x40, 0x40, 0x1c, 0x20, 0x0, 0x60, 0x41, 0x10, 0x0, 0x20, 0x4, 0x0, 0x20, 0x84, 0xf, 0xc0, 0x80, 0x40, 0x2, 0x28, 0x0, 0x80, 0x46, 0x8, 0x0, 0x20, 0xb, 0x0, 0x67, 0x2, 0x11, 0xc0, 0xc0, 0x20, 0x2, 0x70, 0x0, 0x80, 0x3c, 0x8, 0x0, 0x10, 0x11, 0x0, 0x9a, 0x1, 0x11, 0x33, 0x0, 0x20, 0x1, 0x20, 0x0, 0x80, 0x38, 0x4, 0x0, 0x18, 0x10, 0xe3, 0x2, 0x1, 0x10, 0xa, 0x0, 0x70, 0x0, 0xa0, 0x1, 0x0, 0x30, 0x4, 0x0, 0x7, 0xe0, 0x14, 0x1, 0x3, 0x88, 0x6, 0x0, 0xf8, 0x0, 0xb0, 0x2, 0x0, 0x40, 0x4, 0x0, 0x0, 0x60, 0x8, 0x1, 0x1c, 0x88, 0x4, 0x0, 0xe7, 0x0, 0x92, 0x2, 0x0, 0x40, 0x2, 0x0, 0x0, 0x40, 0x8, 0x0, 0xe0, 0x50, 0x1b, 0x0, 0x61, 0x0, 0x6e, 0x4, 0x0, 0x80, 0x2, 0x0, 0x0, 0xc0, 0x4, 0x8, 0xe0, 0x50, 0x60, 0xa0, 0x20, 0x80, 0x4, 0xf, 0x0, 0x80, 0x3, 0xc0, 0x1, 
0x0, 0x4, 0x17, 0xe0, 0x28, 0x80, 0x50, 0x20, 0x80, 0x2, 0x30, 0xc0, 0x80, 0x1, 0x40, 0x2, 0x0, 0x4, 0x21, 0xc0, 0x7, 0x0, 0x10, 0x10, 0x70, 0x6, 0xc0, 0x31, 0x0, 0x2, 0x20, 0x2, 0x0, 0x2, 0x21, 0xc0, 0x1, 0x0, 0x8, 0x10, 0x8, 0x5, 0x0, 0x9, 0x0, 0x66, 0x20, 0x2, 0x0, 0x2, 0x20, 0x20, 0x2, 0x0, 0x8, 0x20, 0x8, 0x8, 0x0, 0x14, 0x81, 0x9c, 0x1c, 0x44, 0x0, 0x4, 0x18, 0x20, 0x4, 0x0, 0xf4, 0x58, 0x4, 0x8, 0x0, 0x64, 0x46, 0xc0, 0x2, 0xa8, 0x0, 0x8, 0x8, 0x20, 0xc, 0x3, 0x43, 0x86, 0x4, 0x8, 0x0, 0x83, 0xb8, 0x20, 
0x1, 0x18, 0x0, 0x38, 0x8, 0x40, 0x10, 0x1, 0xa1, 0x61, 0x2, 0x90, 0x0, 0x80, 0xc4, 0x18, 0x0, 0xe0, 0x0, 0x40, 0x10, 0x40, 0x20, 0x0, 0x80, 0x10, 0xc1, 0xf0, 0x0, 0x80, 0x3a, 0x0, 0x0, 0x40, 0x0, 0x40, 0x20, 0x20, 0x10, 0x1, 0x0, 0x10, 0x23, 0xf0, 0xc, 0x40, 0x1, 0x1, 0x8c, 0x0, 0x0, 0x60, 0x40, 0x20, 0x10, 0x1, 0x0, 0x10, 0x1f, 0xf8, 0xc, 0x0, 0x0, 0x1, 0x8c, 0x0, 0x0, 0x50, 0x80, 0x20, 0x10, 0x1, 0x0, 0x8, 0x6, 0x78, 0xc, 0x0, 0x0, 0x1, 0x80, 0x0, 0x0, 0x53, 0xc0, 0x60, 0x30, 0x2, 0x0, 0x8, 0x7, 0x34, 0xc, 0x67, 0xe7, 0x8f, 0x8c, 0x7c, 0x0, 0x8c, 0x60, 0x41, 0xf8, 0x2, 0x0, 0x10, 0x18, 0x28, 0xc, 0xe6, 0x67, 0x9d, 0x8c, 0xee, 0x1, 0x0, 0x20, 0x42, 0x40, 0x3, 0x0, 0x10, 0x10, 0x18, 0xc, 0xc6, 0x67, 0x19, 0x8c, 0xc6, 0x1, 0x0, 0x30, 0x42, 0x40, 0x4, 0x0, 0x8, 0x30, 0x8, 0xf, 0x86, 0x67, 0x19, 0x8c, 0xc6, 0x1, 0x0, 0x8, 0x24, 0x20, 0xc, 0x0, 0x8, 0x60, 0x8, 0xf, 0x86, 0x67, 0x19, 0x8c, 0xc6, 0x0, 0x80, 0x4, 0x18, 0x20, 0x90, 0x0, 0x18, 0x80, 0xc, 0xc, 0xc6, 0x67, 0x19, 0x8c, 0xc6, 0x0, 0x80, 0x4, 0x20, 0x21, 0xb0, 0x0, 0x15, 0x0, 0x4, 0xc, 0xe6, 0x67, 0x19, 0x8c, 0xc6, 0x0, 0x40, 0x2, 0x40, 0x13, 0xe0, 0x0, 0x16, 0x0, 0x2, 0xc, 0x67, 0xe7, 0x1f, 0x8c, 0xee, 0x0, 0x40, 0x1, 0xc0, 0x13, 
0x80, 0x0, 0x21, 0x0, 0x1, 0xcc, 0x67, 0xe7, 0xf, 0x8c, 0x7c, 0x0, 0x40, 0x2, 0x0, 0x17, 0xc6, 0x0, 0x21, 0x0, 0x1, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2, 0x0, 0x9, 0x6a, 0x0, 0x41, 0x0, 0x1, 0x0, 0x0, 0x40, 0x0, 0x10, 0x30, 0x0, 0x80, 0x1, 0x0, 0x11, 0x12, 0x0, 0x40, 0x80, 0x0, 0x80, 0x0, 0x40, 0x0, 0x10, 0x10, 0x0, 0x40, 0x1, 0x0, 0x20, 0x2, 0x0, 0x60, 0x80, 0x0, 0x80, 0x0, 0x20, 0x0, 0x20, 0x10, 0x0, 0x80, 0x2, 0x0, 0x40, 0x1, 0x0, 0x90, 0x40, 0x1, 0x0, 0x0, 0x20, 0x0, 0x40, 0x8, 0x9, 0x0, 0x4, 0x0, 
0xc0, 0x1, 0x0, 0x90, 0x40, 0x2, 0x0, 0x0, 0x30, 0x0, 0x40, 0x8, 0x16, 0x0, 0x4, 0x7, 0x20, 0x1, 0x18, 0x88, 0x20, 0x1, 0x80, 0x0, 0x10, 0x0, 0x80, 0xc, 0xe0, 0x0, 0x4, 0x8, 0x20, 0x0, 0xa8, 0x88, 0x20, 0x0, 0x80, 0x0, 0x8, 0x0, 0x80, 0xd, 0x0, 0x0, 0x8, 0x10, 0x10, 0x0, 0x49, 0x30, 0x30, 0x0, 0x80, 0x0, 0x7, 0x0, 0x80, 0xf, 0x0, 0x70, 0x78, 
0x10, 0x10, 0x0, 0x47, 0xc1, 0xc8, 0x0, 0x40, 0x0, 0x1, 0x1, 0x0, 0x1e, 0x0, 0x4d, 0xa4, 0x8, 0x28, 0x0, 0x2e, 0x0, 0x88, 0x0, 0xc0, 0x6, 0x2, 0x81, 0x0, 0xee, 0x0, 0x42, 0x3a, 0x8, 0x28, 0x0, 0x18, 0x0, 0x78, 0x0, 0x80, 0x9, 0x84, 0x80, 0x80, 0x84, 0x1, 0x80, 0x42, 0x8, 0x44, 0x0, 0x10, 0x0, 0x8, 0x1, 0x83, 0x30, 0xcc, 0x80, 0x81, 0x2, 0x2, 
0x0, 0x21, 0x96, 0x88, 0x0, 0x20, 0x0, 0x4, 0x2, 0x2, 0xc0, 0x38, 0x60, 0xa1, 0x2, 0x2, 0x0, 0x10, 0xa1, 0x10, 0x0, 0x60, 0x0, 0x4, 0x2, 0x5c, 0x0, 0x0, 0x10, 0x5a, 0x1, 0xc2, 0x0, 0x20, 0x61, 0x10, 0xc3, 0xa0, 0x0, 0x4, 0x1, 0xfc, 0x0, 0x0, 0x8, 0x44, 0x0, 0x3c, 0x0, 0x20, 0x21, 0x89, 0x35, 0x20, 0x0, 0x6, 0x0, 0xe0, 0x0, 0x0, 0x8, 0x44, 0x0, 0x26, 0x0, 0x10, 0x52, 0x85, 0x8, 0x13, 0x80, 0x8, 0x3, 0x60, 0x0, 0x0, 0x14, 0x82, 0x0, 0x2, 0x40, 0x30, 0x8c, 0x72, 0x8, 0xc, 0x40, 0x10, 0x2c, 0xe0, 0x0, 0x0, 0x13, 0x2, 0x0, 0x3, 0xe0, 0x4f, 0x80, 0x72, 0x4, 0x0, 0x38, 0x29, 0xd0, 0x20, 0x0, 0x0, 0x20, 0x1, 0x0, 0x2, 0x23, 0x81, 0x0, 0xfe, 0x4, 0x0, 0x8, 0xc6, 0x40, 0x30, 0x0, 0x0, 0x20, 0x0, 0x80, 0x4, 0x1c, 0x81, 0x1, 0x78, 0x2, 0x0, 0x8, 0x80, 0x20, 0x10, 0x2, 0xc, 0x40, 0x0, 0x80, 0x4, 0x0, 0x2, 0x1, 0x10, 0x1, 0xc0, 0x5, 0x0, 0x20, 0xb, 0x85, 0xb6, 0x40, 0x0, 0x80, 0x4, 0x0, 0x4, 0x1, 0x8, 0x2, 0x40, 0x7, 0x0, 0x30, 0x1c, 0x48, 0x61, 0x80, 0x0, 0xa0, 0x2, 0x0, 0x2, 0x0, 0x84, 0x2, 0x40, 0xe, 0x0, 0x70, 0x70, 0x70, 0x0, 0x80, 0x0, 0xf0, 0x3, 0x80, 0x2, 0x0, 0x84, 0x4, 0x30, 0x1c, 0x0, 0xf0, 0x80, 0x18, 0x0, 0x40, 0x3, 0xf8, 0x1, 0xc0, 0x6, 0x1, 0x2};

#define MONO
//#define PASSTHROUGH

using MyOledDisplay = OledDisplay<SSD130xI2c128x64Driver>;

MyOledDisplay display;

DaisyPod hw;
FourVoiceSynth synth(48000,0);
LowpassFilter filt(20000, 0.707, 48000);
Oscillator test;

static uint8_t screen_write_index = 0;
static uint8_t oscilloscope_screen_buffer[128];
static bool update_oscilloscope = false;

void AudioCallback(AudioHandle::InputBuffer in, AudioHandle::OutputBuffer out, size_t size)
{
	/* Handle IO */
	hw.ProcessAllControls();
	for (size_t i = 0; i < size; i++)
	{
		#ifdef MONO
		#ifdef PASSTHROUGH /*left signal only */
			out[0][i] = in[0][i];
			out[1][i] = out[0][i];
		#else
			//Mono processes the left input and copies it to the left and right output
			filt.ProcessMono(synth.Process(), out[1][i]);
			out[0][i] = out[1][i];

			
			
			if(!update_oscilloscope)
			{
				oscilloscope_screen_buffer[screen_write_index] = ((static_cast<uint8_t>(std::round((((out[1][i]+1)*4))*32))))-96;
				screen_write_index++;
				
				if (screen_write_index >= 128)
				{
					screen_write_index = 0;
					update_oscilloscope = true;
				}
			}

		#endif
		#else
		#ifdef PASSTHROUGH
			out[0][i] = in[0][i];
			out[1][i] = in[1][i];
		#else
			myLowpassL.ProcessMono(in[0][i], out[0][i]);
			myLowpassR.ProcessMono(in[1][i], out[1][i]);				
		#endif
		#endif
	}
}

void handleMidi()
{
	MidiEvent midiEvent = hw.midi.PopEvent();
	if (synth.GetMidiChannel() != midiEvent.channel)
		return;
	switch(midiEvent.type)
	{
		case NoteOn:
			synth.HandleNoteOn(midiEvent.AsNoteOn());
			break;

		case NoteOff:
			synth.HandleNoteOff(midiEvent.AsNoteOff());
			break;

		case ControlChange:
		{
			ControlChangeEvent ccEvent = midiEvent.AsControlChange();
			synth.HandleControlChange(ccEvent);

			switch(ccEvent.control_number)
			{
				case 70:
					filt.SetCutoffFreq(1/127.0 * ccEvent.value * 8000.0 );
					break;
				case 71:
					filt.SetQ((1/127.0 * ccEvent.value * 5.8) + 0.2);
					break;
				default:
					break;
			}
			break;
		}
		default:
			break;
	}
}

int main(void)
{
	hw.Init();

    //display
	MyOledDisplay::Config disp_cfg;
	
	display.Init(disp_cfg);
	display.Fill(false);
	display.SetCursor(0, 0);
	int index = 0;
	uint8_t shift_mask = 0x80;

	for(int i = 0; i < 64; i++)
	{
		for (int j = 0; j < 128; j+=8)
		{
			for (int k = 0; k < 8; k++)
			{
				uint8_t pixel = python_splash[index] & shift_mask;
				display.DrawPixel(j+k,i,pixel);
				shift_mask = shift_mask >> 1;
			}
			shift_mask = 0x80;
			index++;
		}
	}
	display.Update();
	
	display.Fill(false);
	display.SetCursor(0, 0);
	index = 0;

	for(int i = 0; i < 64; i++)
	{
		for (int j = 0; j < 128; j+=8)
		{
			for (int k = 0; k < 8; k++)
			{
				uint8_t pixel = python_splash_logo[index] & shift_mask;
				display.DrawPixel(j+k,i,pixel);
				shift_mask = shift_mask >> 1;
			}
			shift_mask = 0x80;
			index++;
		}
	}
	System::Delay(100);
	display.Update();
	System::Delay(2500);

	display.Fill(false);
	display.Update();

	hw.SetAudioBlockSize(16); // number of samples handled per callback
	hw.SetAudioSampleRate(SaiHandle::Config::SampleRate::SAI_48KHZ);
	hw.StartAdc();
	
	hw.midi.StartReceive();
	hw.StartAudio(AudioCallback);

	while(1) 
	{
		hw.midi.Listen();
		while(hw.midi.HasEvents())
		{
			handleMidi();
		}
		if(update_oscilloscope)
		{
			display.Fill(false);
			for (int i = 0; i < 128; i++)
			{
				display.DrawPixel(i,oscilloscope_screen_buffer[i],true);
			}
			update_oscilloscope = false;
			display.Update();
		}
	}
}
